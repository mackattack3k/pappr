{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["randomValueFromArray","array","min","max","length","Math","floor","random","devLog","l","fetchImage","fromSubreddit","a","fetch","r","JSON","text","parse","jsonR","posts","data","children","images","map","post","url","randomImage","SUBS","Image","hotImage","useState","image","setFoundImage","selectedSubreddit","useEffect","fetchHot","catch","isLoading","useHot","className","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"0NAeaA,G,MAAuB,SAACC,GACjC,IAL2BC,EAAaC,EAMxC,OAAOF,GANoBC,EAKO,EALMC,EAKHF,EAAMG,OAAS,EAJ7CC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,OASlDM,EAAS,SAACC,KAQVC,EAAU,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,+EAEKC,MAAM,GAAD,OA5B8B,GA4B9B,gCAAsCF,EAAtC,wBAFV,cAELG,EAFK,YAGSC,KAHT,SAG0BD,EAAEE,OAH5B,yCAGcC,MAHd,+BAGLC,EAHK,OAKLC,EAAQD,EAAME,KAAKC,SAEnBC,EAASH,EAAMI,KAAI,SAAAC,GAAI,OAAIA,EAAKJ,KAAKK,OACrCC,EAAc1B,EAAqBsB,GAR9B,kBAUJI,GAVI,2DAYJ,UAZI,0DAAH,sDAgBVC,EAAO,CAAC,YAAa,cAqB3B,SAASC,IACL,IAAMC,EApBV,WAAmB,IAAD,EACiBC,qBADjB,mBACPC,EADO,KACAC,EADA,KAERC,EAAoBjC,EAAqB2B,GAW/C,MAVO,6BAAD,OAA8BM,EAA9B,iBAAwDN,GAC9DO,qBAAU,YACQ,uCAAG,4BAAAtB,EAAA,sEAEOF,EAAWuB,GAFlB,OAEPF,EAFO,OAGbC,EAAcD,GAHD,2CAAH,qDAMdI,GAAWC,MAAM5B,KAClB,CAACyB,IACG,CACHF,QACAM,WAAYN,GAKCO,GACjB,OAAIT,EAASQ,UACF,yBAAKE,UAAU,WAAU,wCAEb,WAAnBV,EAASE,MACF,yBAAKQ,UAAU,WAAU,oDAE7B,yBAAKA,UAAU,KACVC,IAAKX,EAASE,MACdU,IAAI,cAYLC,MATf,WAEI,OACI,yBAAKH,UAAU,OACX,kBAACX,EAAD,QCvEQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bb735ac9.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nconst corsPrefix = process.env.NODE_ENV === 'production' ? '' : 'https://cors-anywhere.herokuapp.com/'\n\ninterface Post {\n    data: {\n        url: string;\n    }\n}\n\nconst randomIntFromInterval = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport const randomValueFromArray = (array: any[]) => {\n    const pos = randomIntFromInterval(0, array.length - 1)\n    return array[pos]\n}\n\nconst isDev = process.env.NODE_ENV === 'development'\nconst devLog = (l: any) => {\n    if (!isDev) {\n        return\n    }\n    console.log(l)\n}\n\n\nconst fetchImage = async (fromSubreddit: string) => {\n    try {\n        const r = await fetch(`${corsPrefix}https://reddit.com/r/${fromSubreddit}/hot/.json?count=20`);\n        const jsonR = await JSON.parse(await r.text());\n        devLog({jsonResponse: jsonR})\n        const posts = jsonR.data.children as Post[]\n        devLog({allPosts: posts})\n        const images = posts.map(post => post.data.url)\n        const randomImage = randomValueFromArray(images)\n        devLog({randomImage})\n        return randomImage;\n    } catch (e) {\n        return 'nodata';\n    }\n}\n\nconst SUBS = ['earthporn', 'wallpapers']\n\nfunction useHot() {\n    const [image, setFoundImage] = useState<string>()\n    const selectedSubreddit = randomValueFromArray(SUBS)\n    devLog(`Selected random subreddit ${selectedSubreddit} from ${SUBS}`)\n    useEffect(() => {\n        const fetchHot = async () => {\n            devLog('useEffect start fetch')\n            const image = await fetchImage(selectedSubreddit)\n            setFoundImage(image)\n            devLog('useEffect done')\n        }\n        fetchHot().catch(devLog)\n    }, [selectedSubreddit])\n    return {\n        image,\n        isLoading: !image\n    }\n}\n\nfunction Image() {\n    const hotImage = useHot()\n    if (hotImage.isLoading) {\n        return <div className=\"loading\"><h1>Loading</h1></div>\n    }\n    if (hotImage.image === 'nodata') {\n        return <div className=\"loading\"><h1>Error getting image</h1></div>\n    }\n    return <img className=\"bg\"\n                src={hotImage.image}\n                alt=\"Wallpaper\" />\n}\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <Image />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}