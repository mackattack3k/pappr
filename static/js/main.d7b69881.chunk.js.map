{"version":3,"sources":["utils.ts","config.ts","useRandomHotImage.ts","Background.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomValueFromArray","array","min","max","length","Math","floor","random","devLog","l","REDIRECT_URL","authUrl","fetchImage","fromSubreddit","accessToken","a","fetch","headers","Authorization","r","JSON","text","parse","jsonR","posts","data","children","images","map","post","url","randomImage","defaultSubs","Background","hotImage","useState","image","setFoundImage","access","window","localStorage","getItem","subs","availableSubs","selectedSubreddit","useEffect","access_token","fetchHot","catch","isLoading","subReddit","useRandomHotImage","hasBrowserLoadedImage","setHasLoadedImage","className","src","onLoad","alt","Home","href","Auth","location","useLocation","history","useHistory","code","search","method","btoa","CLIENT_ID","body","stringify","grant_type","redirect_uri","fetchBearer","json","parsedResponse","setItem","push","getBearer","App","basename","process","exact","path","component","to","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d7b69881.chunk.js","sourcesContent":["const randomIntFromInterval = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport const randomValueFromArray = (array: any[]) => {\n    const pos = randomIntFromInterval(0, array.length - 1)\n    return array[pos]\n}\n\nconst isDev = process.env.NODE_ENV === 'development'\nexport const devLog = (l: any) => {\n    if (!isDev) {\n        return\n    }\n    console.log(l)\n}\n","export const corsPrefix = process.env.NODE_ENV === 'production' ? '' : 'https://cors-anywhere.herokuapp.com/'\nexport const CLIENT_ID = process.env.NODE_ENV === 'production' ? 'NxTWOwoh3zE_GA' : process.env.REACT_APP_REDDIT_CLIENT_ID\nexport const REDIRECT_URL = process.env.NODE_ENV === 'production' ? 'https://mackattack3k.github.io/pappr/auth' : 'http://localhost:3000/auth'\nexport const authUrl = `https://www.reddit.com/api/v1/authorize?client_id=${CLIENT_ID}&response_type=code&duration=permanent&state=RANDOM_STRING&scope=read&redirect_uri=${REDIRECT_URL}`\nexport const API_URL = `https://oauth.reddit.com/`\n","import {useEffect, useState} from \"react\";\nimport {devLog, randomValueFromArray} from \"./utils\";\nimport {API_URL, CLIENT_ID} from \"./config\";\n\ninterface Post {\n    data: {\n        url: string;\n    }\n}\n\nconst fetchImage = async (fromSubreddit: string, accessToken: string) => {\n    try {\n        const r = await fetch(`${API_URL}r/${fromSubreddit}/hot`, {\n            headers: {\n                Authorization: `bearer ${accessToken}`,\n                'User-Agent': `Web:${CLIENT_ID}:0.0.1 (by /u/mackattack3k)`\n            }\n        });\n        const jsonR = await JSON.parse(await r.text());\n        devLog({jsonResponse: jsonR})\n        const posts = jsonR.data.children as Post[]\n        devLog({allPosts: posts})\n        const images = posts.map(post => post.data.url)\n        const randomImage = randomValueFromArray(images)\n        devLog({randomImage})\n        return randomImage;\n    } catch (e) {\n        return 'nodata';\n    }\n}\n\nconst defaultSubs = ['earthporn', 'wallpapers']\nexport const useRandomHotImage = () => {\n    const [image, setFoundImage] = useState<string>()\n    const access = window.localStorage.getItem('access');\n    const subs = window.localStorage.getItem('subs');\n    let availableSubs = subs ? JSON.parse(subs) : defaultSubs\n    const selectedSubreddit = randomValueFromArray(availableSubs)\n    devLog(availableSubs)\n    useEffect(() => {\n        if (!access) {\n            return\n        }\n        devLog(`Selected random subreddit ${selectedSubreddit} from ${availableSubs}`)\n        const fetchHot = async () => {\n            devLog('useEffect start fetch')\n            devLog(access)\n            const accessToken = JSON.parse(access).access_token\n            const image = await fetchImage(selectedSubreddit, accessToken)\n            setFoundImage(image)\n            devLog('useEffect done')\n        }\n        fetchHot().catch(devLog)\n    }, [access, availableSubs])\n    return {\n        image,\n        isLoading: !image,\n        subReddit: selectedSubreddit\n    }\n};\n","import React, {useState} from \"react\";\nimport {useRandomHotImage} from \"./useRandomHotImage\";\n\n const Background = () => {\n    const hotImage = useRandomHotImage()\n     const [hasBrowserLoadedImage, setHasLoadedImage] = useState<boolean>()\n    if (hotImage.isLoading) {\n        return <div className=\"loading\"><h1>Loading from /r/{hotImage.subReddit}</h1></div>\n    }\n    if (hotImage.image === 'nodata') {\n        return <div className=\"loading\"><h1>Error getting image</h1></div>\n    }\n    return <>\n        {!hasBrowserLoadedImage && <div className=\"loading\"><h1>Loading from /r/{hotImage.subReddit}</h1></div>}\n        <img className={hasBrowserLoadedImage ? 'bg' : \"bg hidden\"}\n             src={hotImage.image}\n             onLoad={() => setHasLoadedImage(true)}\n             alt=\"Wallpaper\" />\n        </>\n};\n\n export default Background\n","import React from \"react\";\nimport {devLog} from \"./utils\";\nimport Background from \"./Background\";\nimport {authUrl} from \"./config\";\n\nconst Home = () => {\n    const access = window.localStorage.getItem('access');\n    devLog({access, authUrl})\n    if (!access) {\n        return <div>Authenticate with your reddit account to fetch images. We only require read\n            access\n            to posts.<a href={authUrl}>Log in here</a></div>\n    }\n    return <Background />\n}\n\nexport default Home\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch,\n    useHistory,\n    useLocation\n} from \"react-router-dom\";\nimport {parse, stringify} from 'qs'\nimport './App.css';\nimport {devLog} from \"./utils\";\nimport {CLIENT_ID, corsPrefix, REDIRECT_URL} from \"./config\";\nimport Home from \"./Home\";\n\nconst Auth = () => {\n    let location = useLocation();\n    const history = useHistory();\n    const {code} = parse(location.search)\n    const getBearer = async () => {\n        devLog(`Fetching bearer with code ${code}`)\n        const fetchBearer = await fetch(`${corsPrefix}https://www.reddit.com/api/v1/access_token`, {\n            method: 'post',\n            headers: {\n                Authorization: `Basic ${btoa(CLIENT_ID + \":\")}`,\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n            },\n            body: stringify({\n                grant_type: 'authorization_code',\n                code,\n                redirect_uri: REDIRECT_URL\n            })\n        })\n        const parsedResponse = await fetchBearer.json()\n        devLog(parsedResponse);\n        window.localStorage.setItem('access', JSON.stringify(parsedResponse));\n        history.push('/')\n    }\n    getBearer()\n    return <div>Getting bearer</div>\n}\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <Router basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path=\"/auth\" component={Auth} />\n                    <Route exact path=\"/\" component={Home} />\n                    <Redirect to=\"/\" />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}