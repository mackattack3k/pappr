{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["REDIRECT_URL","authUrl","randomValueFromArray","array","min","max","length","Math","floor","random","devLog","l","fetchImage","fromSubreddit","accessToken","a","fetch","headers","Authorization","r","JSON","text","parse","jsonR","posts","data","children","images","map","post","url","randomImage","SUBS","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","Image","hotImage","image","setFoundImage","access","selectedSubreddit","useEffect","access_token","fetchHot","catch","isLoading","useHot","className","src","alt","Home","href","Auth","location","useLocation","history","useHistory","code","search","method","btoa","CLIENT_ID","body","grant_type","redirect_uri","fetchBearer","json","parsedResponse","push","getBearer","App","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.e8a999fa.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    useLocation,\n    useParams,\n    useHistory\n} from \"react-router-dom\";\nimport {parse, stringify} from 'qs'\nimport './App.css';\n\n// access_token: \"27606529-F7VKPALu_xwg_2DvzSQ9N6iwuns\"\n// expires_in: 3600\n// refresh_token: \"27606529-FEjKvQSbv9ZNfhRPVj6EaY7OpUM\"\n// scope: \"read\"\n// token_type: \"bearer\"\n\nconst corsPrefix = process.env.NODE_ENV === 'production' ? '' : 'https://cors-anywhere.herokuapp.com/'\nconst CLIENT_ID = process.env.NODE_ENV === 'production' ? 'NxTWOwoh3zE_GA' : process.env.REACT_APP_REDDIT_CLIENT_ID\nconst REDIRECT_URL = process.env.NODE_ENV === 'production' ? 'https://mackattack3k.github.io/pappr/auth' : 'http://localhost:3000/auth'\nconst authUrl = `https://www.reddit.com/api/v1/authorize?client_id=${CLIENT_ID}&response_type=code&duration=permanent&state=RANDOM_STRING&scope=read&redirect_uri=${REDIRECT_URL}`\nconst API_URL = `https://oauth.reddit.com/`\n\ninterface Post {\n    data: {\n        url: string;\n    }\n}\n\nconst randomIntFromInterval = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport const randomValueFromArray = (array: any[]) => {\n    const pos = randomIntFromInterval(0, array.length - 1)\n    return array[pos]\n}\n\nconst isDev = process.env.NODE_ENV === 'development'\nconst devLog = (l: any) => {\n    if (!isDev) {\n        return\n    }\n    console.log(l)\n}\n\n\nconst fetchImage = async (fromSubreddit: string, accessToken: string) => {\n    try {\n        const r = await fetch(`${API_URL}r/${fromSubreddit}/hot`, {\n            headers: {\n                Authorization: `bearer ${accessToken}`,\n                'User-Agent': `Web:${CLIENT_ID}:0.0.1 (by /u/mackattack3k)`\n            }\n        });\n        const jsonR = await JSON.parse(await r.text());\n        devLog({jsonResponse: jsonR})\n        const posts = jsonR.data.children as Post[]\n        devLog({allPosts: posts})\n        const images = posts.map(post => post.data.url)\n        const randomImage = randomValueFromArray(images)\n        devLog({randomImage})\n        return randomImage;\n    } catch (e) {\n        return 'nodata';\n    }\n}\n\nconst SUBS = ['earthporn', 'wallpapers']\n\nfunction useHot() {\n    const [image, setFoundImage] = useState<string>()\n    const [access] = useLocalStorage('access', 'loading');\n    const selectedSubreddit = randomValueFromArray(SUBS)\n    devLog(`Selected random subreddit ${selectedSubreddit} from ${SUBS}`)\n    useEffect(() => {\n        if (!access) {\n            return\n        }\n        const fetchHot = async () => {\n            devLog('useEffect start fetch')\n            devLog(access)\n            const accessToken = access.access_token\n            const image = await fetchImage(selectedSubreddit, accessToken)\n            setFoundImage(image)\n            devLog('useEffect done')\n        }\n        fetchHot().catch(devLog)\n    }, [selectedSubreddit, access])\n    return {\n        image,\n        isLoading: !image\n    }\n}\n\nfunction useLocalStorage(key: string, initialValue: string) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            // Get from local storage by key\n            const item = window.localStorage.getItem(key);\n            // Parse stored json or if none return initialValue\n            if (!item) {\n                return null\n            }\n            return JSON.parse(item);\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return initialValue;\n        }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value: ((s: string) => void) | string) => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    };\n\n    return [storedValue, setValue];\n}\n\nfunction Image() {\n    const hotImage = useHot()\n    if (hotImage.isLoading) {\n        return <div className=\"loading\"><h1>Loading</h1></div>\n    }\n    if (hotImage.image === 'nodata') {\n        return <div className=\"loading\"><h1>Error getting image</h1></div>\n    }\n    return <img className=\"bg\"\n                src={hotImage.image}\n                alt=\"Wallpaper\" />\n}\n\nconst Home = () => {\n    const [access] = useLocalStorage('access', 'loading');\n    devLog({access, authUrl})\n    if (!access) {\n        return <div>Authenticate with your reddit account to fetch images. We only require read\n            access\n            to posts.<a href={authUrl}>Log in here</a></div>\n    }\n    return <Image />}\n\nconst Auth = () => {\n    let location = useLocation();\n    const history = useHistory();\n    const {code} = parse(location.search)\n    const getBearer = async () => {\n        devLog(`Fetching bearer with code ${code}`)\n        const fetchBearer = await fetch(`${corsPrefix}https://www.reddit.com/api/v1/access_token`, {\n            method: 'post',\n            headers: {\n                Authorization: `Basic ${btoa(CLIENT_ID + \":\")}`,\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n            },\n            body: stringify({\n                grant_type: 'authorization_code',\n                code,\n                redirect_uri: REDIRECT_URL\n            })\n        })\n        const parsedResponse = await fetchBearer.json()\n        devLog(parsedResponse);\n        window.localStorage.setItem('access', JSON.stringify(parsedResponse));\n        history.push('/')\n    }\n    getBearer()\n    return <div>Getting bearer</div>\n}\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route path=\"/auth\" component={Auth} />\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}